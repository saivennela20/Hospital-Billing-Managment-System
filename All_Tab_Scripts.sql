CREATE TABLE ALL_TAB_SCRIPTS 
(
TAB_NAME VARCHAR2(20),
TAB_SCRIPT VARCHAR2(5000)
);


INSERT INTO ALL_TAB_SCRIPTS VALUES ( 'CUSTOMER' , 'CREATE TABLE CUSTOMER
(
CUST_ID VARCHAR(20),
CUST_FIRST_NAME VARCHAR(20) NOT NULL,
CUST_LAST_NAME VARCHAR(20) NOT NULL,
CUST_MIDDLE_NAME VARCHAR(20),
CUST_GENDER VARCHAR(20) NOT NULL,
CUST_MARITAL_STATUS VARCHAR(20) NOT NULL,
CUST_EMAIL VARCHAR(40) NOT NULL,
CUST_PASSWORD VARCHAR(40) NOT NULL,
CUST_DOB DATE NOT NULL,
CUST_EFFECTIVE_FROM TIMESTAMP,
CUST_EFFECTIVE_TO TIMESTAMP,
IS_ACTIVE VARCHAR2(20),
HASH_VALUE NUMBER,
CONSTRAINT PK_CUST_ID PRIMARY KEY(CUST_ID),
CONSTRAINT CHK_FNAME CHECK(REGEXP_LIKE(CUST_FIRST_NAME,''^[A-Za-z]+$'')),
CONSTRAINT CHK_LNAME CHECK(REGEXP_LIKE(CUST_LAST_NAME,''^[A-Za-z]+$'')),
CONSTRAINT CHK_MNAME CHECK(REGEXP_LIKE(CUST_LAST_NAME,''^[A-Za-z]+$'')),
CONSTRAINT CHK_CUST_GENDER CHECK(UPPER(CUST_GENDER) IN (''MALE'', ''FEMALE'', ''OTHER'')),
CONSTRAINT CHK_CUST_EMAIL CHECK(REGEXP_LIKE(CUST_EMAIL,''^[A-Za-z0-9.-]+@[A-Za-z]+\.[A-Za-z]{2,4}$'')),
CONSTRAINT CHCK_CUST_IS_ACTIVE CHECK(IS_ACTIVE IN (''Y'' , ''N'')),
CONSTRAINT UNNIQUE_EMAIL_VAL UNIQUE(CUST_EMAIL)
)' );



INSERT INTO ALL_TAB_SCRIPTS VALUES ( 'CUST_CONTACT_DETAILS' , 'CREATE TABLE CUST_CONTACT_DETAILS
(
ADDRESS_ID NUMBER PRIMARY KEY ,
CUST_ID VARCHAR(20) NOT NULL,
ADDRESS_LINE_1 VARCHAR(20) NOT NULL,
ADDRESS_LINE_2 VARCHAR(20) NOT NULL,
CITY VARCHAR(20) NOT NULL,
CUST_STATE VARCHAR(20) NOT NULL ,
REGION VARCHAR(20) ,
ZIPCODE NUMBER ,
PHONE_1 NUMBER ,
EFFECTIVE_FROM TIMESTAMP NOT NULL ,
EFFECTIVE_TO TIMESTAMP NOT NULL ,
CONSTRAINT FK_ADDR_CUST_ID FOREIGN KEY(CUST_ID) REFERENCES CUSTOMER(CUST_ID) ON DELETE CASCADE,
CONSTRAINT CHCK_REGION_NAME CHECK(UPPER(REGION) in (''CENTRAL'' , ''WEST'' , ''EAST'' , ''NORTH'' , ''SOUTH'' )),
CONSTRAINT CHCK_LENGTH_ZIP CHECK(LENGTH(ZIPCODE) = 5),
CONSTRAINT CHCK_LENGTH_PHONE_1 CHECK(LENGTH(PHONE_1) = 10)

)');


INSERT INTO ALL_TAB_SCRIPTS VALUES ( 'CUST_PAYMENT' , 'CREATE TABLE CUST_PAYMENT
(
PAYMENT_ID NUMBER PRIMARY KEY,
CUST_ID VARCHAR(20) ,
PAYMENT_TYPE VARCHAR(20) NOT NULL,
CARD_TYPE VARCHAR(20) NOT NULL,
CARD_NUMBER NUMBER NOT NULL,
CARD_EXPIRY_DATE VARCHAR(20) NOT NULL,
PAYMENT_DATE TIMESTAMP NOT NULL,
PAYMENT_STATUS VARCHAR2(20) ,
CONSTRAINT FK_CUST_PAYMENT_CUST_ID
FOREIGN KEY(CUST_ID) REFERENCES CUSTOMER(CUST_ID),
CONSTRAINT CHCK_CARD_TYPE CHECK(UPPER(CARD_TYPE) in (''DEBIT CARD'' , ''CREDIT CARD''  )),
CONSTRAINT LENGTH_CHCK_CARD_NUMBER CHECK(LENGTH(CARD_NUMBER) = 16 )
)'    );


INSERT INTO ALL_TAB_SCRIPTS VALUES ( 'VENDOR' ,  'CREATE TABLE VENDOR
(
VENDOR_ID NUMBER PRIMARY KEY,
VENDOR_NAME VARCHAR(20) NOT NULL,
VENDOR_DESC VARCHAR(40) NOT NULL,
CONTRACT_START_DATE DATE NOT NULL,
CONTRACT_END_dATE DATE NOT NULL,
IS_RENEWED VARCHAR(5),
CONTRACT_TYPE VARCHAR2(20),
CONTRACT_ID VARCHAR2(20) NOT NULL,
CONSTRAINT CHCK_IS_RENEWED CHECK(IS_RENEWED IN (''Y'', ''N''))
)'   );


INSERT INTO ALL_TAB_SCRIPTS VALUES ( 'VENDOR_ADDRESS' , 'CREATE TABLE VENDOR_ADDRESS
(
VENDOR_ADDRESS_ID NUMBER PRIMARY KEY,
VENDOR_ID NUMBER NOT NULL,
VENDOR_EMAIL VARCHAR(20) NOT NULL,
ADDRESS_LINE_1 VARCHAR(20) NOT NULL,
ADDRESS_LINE_2 VARCHAR(20) NOT NULL,
CITY VARCHAR(20) NOT NULL,
STATE VARCHAR(20) NOT NULL,
ZIPCODE VARCHAR(20) NOT NULL,
PHONE_1 VARCHAR(20) NOT NULL,
CONSTRAINT FK_VENDOR_ID FOREIGN KEY(VENDOR_ID)
REFERENCES VENDOR(VENDOR_ID),
CONSTRAINT CHCK_ZIPCODE CHECK(LENGTH(ZIPCODE)=5),
CONSTRAINT CHCK_PHONE_1 CHECK(LENGTH(PHONE_1)=10)
)'   );

INSERT INTO ALL_TAB_SCRIPTS VALUES ( 'VENDOR_HISTORY' ,   
'CREATE TABLE VENDOR_HISTORY AS SELECT * FROM VENDOR WHERE 1 = 2' );

INSERT INTO ALL_TAB_SCRIPTS VALUES  ( 'PRODUCT_CATEGORY' , 
'CREATE TABLE PRODUCT_CATEGORY
(
CATEGORY_ID NUMBER PRIMARY KEY ,
CATEGORY_NAME VARCHAR(40) NOT NULL
)' );



INSERT INTO ALL_TAB_SCRIPTS VALUES (  'PRODUCT_DETAILS'  , 'CREATE TABLE PRODUCT_DETAILS
(
PROD_DETAIL_ID VARCHAR2(20) PRIMARY KEY,
PROD_NAME VARCHAR2(20) NOT NULL,
VENDOR_ID NUMBER NOT NULL,
CATEGORY_ID NUMBER NOT NULL,
PROD_DIMENSION NUMBER NOT NULL,
PROD_COLOR VARCHAR2(20) NOT NULL,
PROD_WEIGHT NUMBER NOT NULL,
PROD_STOCK_DATE DATE NOT NULL,
PROD_UNIT_AVAILABLE NUMBER NOT NULL,
PROD_PRICE_PER_UNIT NUMBER NOT NULL,
IN_STOCK VARCHAR2(5),
CONSTRAINT FK_PROD_CATEGORY_ID FOREIGN KEY (CATEGORY_ID) REFERENCES PRODUCT_CATEGORY(CATEGORY_ID) ,
CONSTRAINT FK_VENDOR_VENDOR_ID FOREIGN KEY(VENDOR_ID) REFERENCES VENDOR(VENDOR_ID),
CONSTRAINT CHK_PROD_UNIT_AVAIL CHECK(PROD_UNIT_AVAILABLE>0),
CONSTRAINT CHCK_IN_STOCK CHECK(IN_STOCK IN (''Y'', ''N''))
)'   );


INSERT INTO ALL_TAB_SCRIPTS VALUES (  
'ORDERS' , 
'CREATE TABLE ORDERS
(
ORDER_ID NUMBER PRIMARY KEY,
CUST_ID VARCHAR2(20) NOT NULL,
ADDRESS_ID NUMBER NOT NULL,
ORDER_DATE TIMESTAMP,
PAYMENT_ID NUMBER NOT NULL,
TOTAL_ITEMS NUMBER,
SHIPPING_DAYS NUMBER,
ORDER_STATUS VARCHAR(20),
DELIVERY_MODE VARCHAR(20),
CONSTRAINT FK_ORDERS_CUST_ID  FOREIGN KEY (CUST_ID) REFERENCES CUSTOMER(CUST_ID) 
ON DELETE CASCADE,
CONSTRAINT FK_ADDRESS_ID FOREIGN KEY(ADDRESS_ID)
REFERENCES CUST_CONTACT_DETAILS(ADDRESS_ID) ON DELETE CASCADE,
CONSTRAINT FK_ORDER_DETAILS_PAYMENT_ID FOREIGN KEY(PAYMENT_ID) REFERENCES CUST_PAYMENT(PAYMENT_ID) 
)');

INSERT INTO ALL_TAB_SCRIPTS VALUES (  'LINE_ITEMS' ,  'CREATE TABLE LINE_ITEMS
(
ITEM_ID NUMBER PRIMARY KEY,
ORDER_ID NUMBER NOT NULL, 
PROD_DETAIL_ID VARCHAR2(20),
QUANTITY VARCHAR(20),
TAX_AMOUNT NUMBER(6,2),
SHIPPING_AMOUNT NUMBER(6,2),
AMOUNT_PER_UNIT NUMBER(6,2),
TOTAL_LINE_AMOUNT NUMBER(6,2),
ORDER_STATUS VARCHAR2(20),
CONSTRAINT FK_LINE_ITEMS_PROD_DETAILS_ID FOREIGN KEY(PROD_DETAIL_ID)
REFERENCES PRODUCT_DETAILS(PROD_DETAIL_ID) ,
CONSTRAINT FK_LINE_ITEMS_ORDER_ID FOREIGN KEY(ORDER_ID)
REFERENCES ORDERS(ORDER_ID) ON DELETE CASCADE,
CONSTRAINT CHK_QUANTITY CHECK(QUANTITY>0)
)' ) ;

INSERT INTO ALL_TAB_SCRIPTS VALUES ( 'REVIEWS' , 'CREATE TABLE REVIEWS
(
REVIEW_ID NUMBER PRIMARY KEY,
CUST_ID VARCHAR(20) NOT NULL,
PROD_DETAIL_ID VARCHAR2(20) NOT NULL ,
COMMENTS VARCHAR(20) NOT NULL ,
RATING NUMBER(2,1) NOT NULL,
CONSTRAINT FK_PROD_DETAIL_ID FOREIGN KEY(PROD_DETAIL_ID)
REFERENCES PRODUCT_DETAILS(PROD_DETAIL_ID),
CONSTRAINT FK_PROD_CUST_ID FOREIGN KEY(CUST_ID)
REFERENCES CUSTOMER(CUST_ID),
CONSTRAINT CHK_RATING CHECK(RATING<=5)
)'  );

COMMIT;
SELECT * FROM ALL_TAB_SCRIPTS ;
